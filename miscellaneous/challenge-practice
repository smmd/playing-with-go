func solution(n int) int {
    str := strconv.Itoa(n)
    
    // TODO: refactor the asignation of the numbers by slice section inside a loop
    n1, err := strconv.Atoi(str[:1])
    if err != nil {
        return 0
    }
    n2, err := strconv.Atoi(str[1:2])
    if err != nil {
        return 0
    }
    
    return n1 + n2
}


func solution(l int, r int) int {
    // TODO note: the zero behaivor is no easy to catch
    count := 0
    unitSpecialsMap := map[string]string{
        "0": "0",
        "6": "9",
        "8": "8",
        "9": "6",
    }
    
    for i := l; i <= r; i++ {
        strN := strconv.Itoa(i)
        finalS := ""
        
        for _, char := range strN {
            s := string(char)
            if value, ok := unitSpecialsMap[s]; ok {
                finalS = value + finalS
            }
        }
        
        if finalS != "" {
            finalNumber, err := strconv.Atoi(finalS)
            if err != nil {
                log.Panic(err)
            }
            
            if finalNumber == i {
                count++
            }
        }
    }
    
    return count
}


func solution(s string, k int) int {
    count := 0
    if k > len(s) {
        return 0
    }
    
    index := make([]int, k)
    for i := range index {
        index[i] = i
    }
    
    
    
    return count
}
